---
title: "Geographies prioritization"
toc: true
format:
  html: 
    code-fold: true
    theme: simplex
---

# 0) Load packages and data

```{r}
pacman::p_load(tidyverse, here, sf, janitor, skimr, BAMMtools, ggcorrplot, mapview, RColorBrewer, openxlsx)
```

**Load data**

```{r, warning=FALSE, message=FALSE, results='hide'}
geo_enriched <- read_rds(here("output", "summarise_geo", "2_enrichment", "hybas6_enriched.rds"))

geo <- st_read(here("input", "geographies", "hybas_lev06_v1c.shp"))

wmo <- st_read(here("input", "geographies", "wmobb_basins.shp"))
```

# 1) Priority index

### 1.1) Create function

```{r}
generate_opp_index <- function(geo_enriched, top_n_catchments = 50){
  geo_enriched <- geo_enriched %>%
    st_drop_geometry()
  
  # Get breaks
    ## Value of crop production
  breaks_vcp <- geo_enriched %>% filter(vcp_mean > 0)
  breaks_vcp <- getJenksBreaks(breaks_vcp$vcp_mean, k = 6)
    ## Assets density
  breaks_d_sites <- geo_enriched %>% filter(d_sites > quantile(geo_enriched$d_sites, probs = c(0.5), na.rm = TRUE))
  breaks_d_sites <- getJenksBreaks(breaks_d_sites$d_sites, k = 5)

  data_prioritized <- geo_enriched %>%
  
  # Prepare data
    ## Binary whether industry with high assets density
    mutate(across(starts_with("b_"), ~ if_else(.x == 4, 1, 0), .names = "if_{.col}")) %>%
    mutate(across(starts_with("if_b_"), ~ replace_na(.x, 0))) %>%
    ## Binary whether risks layer above medium risk
    mutate(across(c(RC1, RC2, RC3, S2_4, RC8), ~ if_else(.x >= 3.4, 1, 0), .names = "if_{.col}")) %>%
    mutate(if_Phy_P3rc = if_else(Phy_P3rc >= 0.3, 1, 0)) %>%
    mutate(across(if_RC1:if_Phy_P3rc, ~ replace_na(.x, 0))) %>%
    rowwise() %>%
    mutate(
    ## Count industries with high assets density  
      n_ind_ifs = sum(c_across(starts_with("if_b_"))),
    ## Count risk layers above medium risk  
      n_risk_ifs = sum(c_across(if_RC1:if_Phy_P3rc))
    ) %>%
    ungroup() %>%
  
  # Transform data into criteria, ranging from 1 (low opportunity) to 5 (high opportunity)
    mutate(
    ## Criterion A: Value of crop production
      criteria_a = case_when(
        vcp_mean == 0 | is.na(vcp_mean) ~ 0,
        between(vcp_mean, breaks_vcp[5], breaks_vcp[6]) ~ 5,
        between(vcp_mean, breaks_vcp[4], breaks_vcp[5]) ~ 4,
        between(vcp_mean, breaks_vcp[3], breaks_vcp[4]) ~ 3,
        between(vcp_mean, breaks_vcp[2], breaks_vcp[3]) ~ 2,
        vcp_mean < breaks_vcp[2] ~ 1
        ),
    ## Criterion B: Assets density
      criteria_b = case_when(
        d_sites == 0 | is.na(d_sites) ~ 0,
        between(d_sites, breaks_d_sites[4], breaks_d_sites[5]) ~ 5,
        between(d_sites, breaks_d_sites[3], breaks_d_sites[4]) ~ 4,
        between(d_sites, breaks_d_sites[2], breaks_d_sites[3]) ~ 3,
        between(d_sites, breaks_d_sites[1], breaks_d_sites[2]) ~ 2,
        d_sites < breaks_d_sites[1] ~ 1
        ),
    ## Criterion C: Number of industries with high assets density
      criteria_c = if_else(n_ind_ifs > 5, 5, n_ind_ifs),
    ## Criterion D: Number of risk layers above medium risk
      criteria_d = if_else(n_risk_ifs > 5, 5, n_risk_ifs)
    ) %>%
    rowwise() %>%
  
  # Build index
    mutate(
      max_abc = max(c(criteria_a, criteria_b, criteria_c), na.rm = TRUE), # Max of economic factors Max(A,B,C)
      opp_index = sum(c(max_abc, criteria_d), na.rm = TRUE)               # Opportunity Index [max(A,B,C)+D]
    ) %>%
    ungroup()
  
  # Identify catchments of highest opportunity (region_wide)
    ## Arrange data to break ties 
  data_arranged <- data_prioritized %>%
    arrange(desc(vcp_mean)) %>% # 4th Average value of crop production
    arrange(desc(n_ind_ifs)) %>% # 3rd Count industries with high assets density 
    arrange(desc(d_sites)) %>% # 2nd Assets density
    arrange(desc(n_risk_ifs)) # 1st Count risk layers above medium risk
      # Slice top n catchments
  regional_top <- data_arranged %>%
    slice_max(opp_index, n = top_n_catchments, with_ties = FALSE) %>%
    mutate(region_top = "Yes") %>%
    dplyr::select(1, region_top)
  
  # Join info of top catchments back to data 
  data_prioritized %>%
    left_join(regional_top)
}
```

### 1.2) Apply function using regional thresholds

```{r}
regions_list <- geo_enriched %>% 
    drop_na(region) %>% 
    split(~region)

geo_prioritized <- regions_list %>% 
  map(generate_opp_index) %>% 
  bind_rows()
```

# 2) Explore results

```{r}
glimpse(geo_prioritized)
```

```{r}
geo_prioritized %>%
  select(n_sites, d_sites, vcp_mean:Phy_P3rc, n_ind_ifs:region_top) %>%
  skim()
```

## 2.1) Correlogram of criteria

```{r}
corr <- geo_prioritized %>%
  dplyr::select(
    `Opp Index [max(A,B,C)+D]` = opp_index,
    `max(A,B,C)` = max_abc,
    `A) Value of Production` = criteria_a,
    `B) Assets Density` = criteria_b,
    `C) Number of Industries` = criteria_c, 
    `D) Number of Risks` = criteria_d, 
    `D1) Water Scarcity` = RC1,
    `D2) Flooding` = RC2,
    `D3) Water Quality` = RC3, 
    `D4) Ecosystem Condition` = S2_4, 
    `D5) WASH` = RC8, 
    `D6) Climate Change` = Phy_P3rc
  ) %>%
  cor(method = "spearman", use = "na.or.complete") %>%
  round(1)
```

```{r}
ggcorrplot(corr,
           hc.order = FALSE, 
           type = "lower", 
           lab = TRUE, 
           lab_size = 3, 
           method = "circle", 
           colors = c("tomato2", "white", "springgreen3"), 
           title = "Correlogram of criteria & index", 
           ggtheme = theme_bw)
```

## 2.2) Mapview

**Transform to spatial object**

```{r}
prio_spat <- geo %>%
  dplyr::select(1) %>%
  mutate(across(1, as.factor)) %>%
  left_join(geo_prioritized) %>%
  dplyr::select(-c(starts_with("if_")))
```

```{r}
prio_spat %>%
  filter(region_top == "Yes") %>%
  mapview(
    layer.name = "Top 50 per region",
    col.regions = "#002673", 
    lwd = 0.1,
    label = "wmo_basin"
  )
```

## 2.3) Get list of WMO basins

```{r}
wmo_names <- geo_prioritized %>%
  filter(region_top == "Yes") %>%
  group_by(region, wmo_basin) %>%
  count()
```

# 3) Export files

**Transform to spatial object**

```{r}
write_rds(geo_prioritized, here("output", "summarise_geo", "3_prioritization", "hybas6_prioritized.rds"))
```

```{r}
st_write(prio_spat, here("output", "summarise_geo", "shp", "hybas6_prioritized.shp"), layer_options = "ENCODING=UTF-8", delete_layer = TRUE)
```

```{r}
write.xlsx(list(
  "all" = geo_prioritized,
  "wmo_names" = wmo_names),
  file = here("output", "summarise_geo", "3_prioritization", "hybas6_list_basins_collective_action.xlsx"), rowNames = FALSE)
```

```{r}
wmobb_ids <- geo_prioritized %>%
  filter(region_top == "Yes") %>%
  pull(wmobb_id)

wmo_100_basins <- wmo %>%
  filter(WMOBB %in% wmobb_ids)
```

```{r}
st_write(wmo_100_basins, here("output", "summarise_geo", "shp", "wmo_100_basins.shp"), layer_options = "ENCODING=UTF-8", delete_layer = TRUE)
```

